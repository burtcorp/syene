#!/usr/bin/env ruby

$: << File.expand_path('../../lib', __FILE__)

unless defined?(Bundler)
  require 'rubygems'
  require 'bundler'
end

Bundler.setup(:default, :production)

require 'eventmachine'
require 'mq'
require 'geoip'
require 'mongo'
require 'json'
require 'syene/lookup'


geo_db = Mongo::Connection.new.db('geo')
geo_ip = GeoIP::City.new(File.expand_path('../../tmp/GeoIPCity.dat', __FILE__))
lookup = Syene::Lookup.new(:db => geo_db, :geo_ip => geo_ip)

Signal.trap('INT')  { AMQP.stop { EM.stop } }
Signal.trap('TERM') { AMQP.stop { EM.stop } }

AMQP.start do
  channel = MQ.new
  exchange = MQ::Exchange.new(channel, :direct, 'burt.syene')
  queue = MQ::Queue.new(channel, 'burt.syene.requests')
  queue.bind(exchange, :key => '')

  queue.subscribe do |headers, query|
    reply_key = headers.headers[:reply_key]

    operation = lambda { lookup.ip_lookup(query) }

    callback = lambda do |result|
      if result
        response = {}.merge(result)
        response.delete(:_id)
      else
        response = nil
      end
      exchange.publish(response.to_json, :key => reply_key, :headers => {:query => query})
    end
    
    EM.defer(operation, callback)
  end
end